<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFrameworks>netcoreapp2.2;net471</TargetFrameworks>
    <IsPackable>False</IsPackable>
    <Version>2.0.15</Version>
    <ServerGarbageCollection>false</ServerGarbageCollection>
    <RetainVMGarbageCollection>false</RetainVMGarbageCollection>
    <TargetLatestRuntimePatch>true</TargetLatestRuntimePatch>
  </PropertyGroup>
  <!-- mono fix -->
  <PropertyGroup>
    <TargetIsMono Condition="$(TargetFramework.StartsWith('net4')) and '$(OS)' == 'Unix'">true</TargetIsMono>
    <BaseFrameworkPathOverrideForMono Condition="'$(BaseFrameworkPathOverrideForMono)' == '' AND '$(TargetIsMono)' == 'true' AND EXISTS('/usr/lib/mono')">/usr/lib/mono</BaseFrameworkPathOverrideForMono>
    <FrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != '' AND '$(TargetFramework)' == 'net471'">$(BaseFrameworkPathOverrideForMono)/4.7.1-api</FrameworkPathOverride>
    <EnableFrameworkPathOverride Condition="'$(BaseFrameworkPathOverrideForMono)' != ''">true</EnableFrameworkPathOverride>
    <AssemblySearchPaths Condition="'$(BaseFrameworkPathOverrideForMono)' != ''">$(FrameworkPathOverride)/Facades;$(AssemblySearchPaths)</AssemblySearchPaths>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="GCMiddleware.fs" />
    <Compile Include="Middleware.fs" />
    <Compile Include="Config.fs" />
    <Compile Include="Startup.fs" />
    <Compile Include="Program.fs" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Google.Api.Gax" Version="2.5.0" />
    <PackageReference Include="Google.Apis" Version="1.36.1" />
    <PackageReference Include="Google.Apis.Auth" Version="1.36.1" />
    <PackageReference Include="Google.Apis.Core" Version="1.36.1" />
    <PackageReference Include="Microsoft.AspNetCore.Hosting" Version="2.2.0" />
    <PackageReference Include="Microsoft.AspNetCore.Http" Version="2.2.0" />
    <PackageReference Include="Microsoft.AspNetCore.Server.Kestrel" Version="2.2.0" />
    <PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="2.2.0" />
    <PackageReference Include="Microsoft.Extensions.Logging.Console" Version="2.2.0" />
    <PackageReference Include="NCoreUtils.AspNetCore.Logging.Google" Version="2.0.3-alpha2" />
    <PackageReference Include="NCoreUtils.FSharp" Version="2.0.2" />
    <PackageReference Include="NCoreUtils.FSharp.AspNetCore" Version="2.0.3-alpha0" />
    <PackageReference Include="Newtonsoft.Json" Version="12.0.1" />
    <PackageReference Include="System.Net.Http" Version="4.3.4" />
    <!-- forced newer versions -->
    <PackageReference Include="System.Runtime.Loader" Version="4.3.0" />
    <PackageReference Include="System.Threading.Thread" Version="4.3.0" />
    <PackageReference Include="System.Threading.ThreadPool" Version="4.3.0" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\NCoreUtils.Images\NCoreUtils.Images.fsproj" />
    <ProjectReference Include="..\NCoreUtils.Images.ImageMagick\NCoreUtils.Images.ImageMagick.fsproj" />
    <ProjectReference Include="..\NCoreUtils.Images.WebService.Shared\NCoreUtils.Images.WebService.Shared.fsproj" />
    <ProjectReference Include="..\NCoreUtils.Images.Optimization.External\NCoreUtils.Images.Optimization.External.fsproj" />
  </ItemGroup>
  <ItemGroup Condition="'$(TargetFramework)' == 'net471'">
    <Reference Include="netstandard" />
    <Reference Include="System.Console" />
    <Reference Include="System.IO" />
    <Reference Include="System.Reflection" />
    <Reference Include="System.Runtime" />
  </ItemGroup>
  <ItemGroup Condition="'$(TargetFramework)' == 'net471' OR '$(OS)' == 'Unix'">
    <PackageReference Include="FSharp.Core" Version="4.5.2" />
  </ItemGroup>
  <Target Name="DockerBuild">
    <!-- Ensure properties -->
    <PropertyGroup>
      <DockerFile Condition=" '$(DockerFile)' == '' ">Dockerfile</DockerFile>
      <DockerImageName Condition=" '$(DockerImageName)' ==  '' ">$(AssemblyName.ToLowerInvariant().Replace('.', '-'))</DockerImageName>
      <DockerImageVersion Condition=" '$(DockerImageVersion)' == '' ">$(Version)</DockerImageVersion>
      <DockerFilePath>$([MSBuild]::GetPathOfFileAbove($(DockerFile)))</DockerFilePath>
      <DockerRootPath>$([System.IO.Path]::GetDirectoryName($(DockerFilePath)))</DockerRootPath>
    </PropertyGroup>
    <!-- Execute docker -->
    <Exec Command="docker build -t $(DockerImageName):$(DockerImageVersion) -f $(DockerFilePath) $(DockerRootPath)" />
  </Target>
</Project>
